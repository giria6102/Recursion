bool isvalid(int newx,int newy,vector<vector<bool>>&vis,vector < vector < int >> & arr,int n){
    if((newx>=0&&newx<n)&&(newy>=0&&newy<n)&&(vis[newx][newy]==false)&&(arr[newx][newy]!=0)){
        return true;
    }
    return false;
}
void solve( vector<vector<bool>>&vis,string path, vector<string>&ans,int x,int y,vector < vector < int >> & arr,int n){

//base case
   if(x==n-1&&y==n-1){
       ans.push_back(path);
       return;
   }
   //down
   if(isvalid(x+1,y,vis,arr,n)){
       vis[x][y]=1;
       solve(vis,path+'D',ans,x+1,y,arr,n);
       vis[x][y]=0;
   }
   //left
   if(isvalid(x,y-1,vis,arr,n)){
       vis[x][y]=1;
       solve(vis,path+'L',ans,x,y-1,arr,n);
       vis[x][y]=0;
   }
   //right
   if(isvalid(x,y+1,vis,arr,n)){
       vis[x][y]=1;
       solve(vis,path+'R',ans,x,y+1,arr,n);
       vis[x][y]=0;
   }
   //up
   if(isvalid(x-1,y,vis,arr,n)){
       vis[x][y]=1;
       solve(vis,path+'U',ans,x-1,y,arr,n);
       vis[x][y]=0;
   }

}
vector < string > searchMaze(vector < vector < int >> & arr, int n) {
    vector<vector<bool>>visited(n,vector<bool>(n,0));
    vector<string>ans;
    string path="";
    if(arr[0][0]==0){
        return ans;
    }
    solve(visited,path,ans,0,0,arr,n);
    return ans;

}
